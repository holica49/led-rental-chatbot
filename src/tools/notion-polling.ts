// src/tools/notion-polling.ts
import { Client } from '@notionhq/client';
import { NotionStatusAutomation } from './notion-status-automation.js';

// Ìè¥ÎßÅ ÏÑúÎπÑÏä§ Ïù∏Ïä§ÌÑ¥Ïä§ (Ïã±Í∏ÄÌÜ§)
let pollingServiceInstance: NotionPollingService | null = null;

export class NotionPollingService {
  private notion: Client;
  private automation: NotionStatusAutomation;
  private lastCheckedPages: Map<string, string> = new Map();
  private lastFileCheckMap: Map<string, { hasQuote: boolean; hasRequest: boolean; lastChecked: number }> = new Map();
  private pollingInterval: NodeJS.Timeout | null = null;
  private isPolling: boolean = false;

  constructor() {
    this.notion = new Client({ auth: process.env.NOTION_API_KEY });
    this.automation = new NotionStatusAutomation();
  }

  /**
   * Ìè¥ÎßÅ ÏãúÏûë
   */
  async startPolling() {
    if (this.isPolling) {
      console.log('‚ö†Ô∏è Ïù¥ÎØ∏ Ìè¥ÎßÅÏù¥ Ïã§Ìñâ Ï§ëÏûÖÎãàÎã§.');
      return;
    }

    console.log('üîÑ Notion ÏÉÅÌÉú Î≥ÄÍ≤Ω Ìè¥ÎßÅ ÏãúÏûë');
    this.isPolling = true;
    
    // Ï¥àÍ∏∞ ÏÉÅÌÉú Î°úÎìú
    await this.loadInitialStates();
    
    // 30Ï¥àÎßàÎã§ ÏÉÅÌÉú ÌôïÏù∏
    this.pollingInterval = setInterval(async () => {
      await this.checkStatusChanges();
    }, 30000);
  }

  /**
   * Ìè¥ÎßÅ Ï§ëÏßÄ
   */
  stopPolling() {
    if (this.pollingInterval) {
      clearInterval(this.pollingInterval);
      this.pollingInterval = null;
    }
    this.isPolling = false;
    console.log('üõë Notion Ìè¥ÎßÅ Ï§ëÏßÄ');
  }

  /**
   * Ï¥àÍ∏∞ ÏÉÅÌÉú Î°úÎìú (Ìè¥ÎßÅ ÏãúÏûë Ïãú ÌòÑÏû¨ ÏÉÅÌÉú Ï†ÄÏû•)
   */
  private async loadInitialStates() {
    try {
      console.log('üìã Ï¥àÍ∏∞ ÏÉÅÌÉú Î°úÎìú Ï§ë...');
      
      // Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ IDÎ•º ÌïòÏù¥Ìîà ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò
      const databaseId = this.formatDatabaseId(process.env.NOTION_DATABASE_ID!);
      console.log(`   Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ID: ${databaseId}`);
      
      const response = await this.notion.databases.query({
        database_id: databaseId,
        filter: {
          property: 'ÌñâÏÇ¨ ÏÉÅÌÉú',
          status: {
            does_not_equal: 'ÏôÑÎ£å'
          }
        }
      });

      console.log(`   Ï¥ù ${response.results.length}Í∞ú ÌñâÏÇ¨ Ï°∞ÌöåÎê®`);
      
      let quoteReviewCount = 0;

      for (const page of response.results) {
        if (page.object !== 'page') continue;
        
        const pageId = page.id;
        const properties = (page as any).properties;
        const currentStatus = properties['ÌñâÏÇ¨ ÏÉÅÌÉú']?.status?.name;
        const eventName = properties['ÌñâÏÇ¨Î™Ö']?.title?.[0]?.text?.content || 'Unknown';
        
        if (currentStatus) {
          this.lastCheckedPages.set(pageId, currentStatus);
          console.log(`üìå ${eventName}: ${currentStatus}`);
          
          // ÌååÏùº ÏÉÅÌÉúÎèÑ Ï¥àÍ∏∞Ìôî (Í≤¨Ï†Å Í≤ÄÌÜ† ÏÉÅÌÉúÏùº Îïå)
          if (currentStatus === 'Í≤¨Ï†Å Í≤ÄÌÜ†') {
            quoteReviewCount++;
            const hasQuoteFile = (properties['Í≤¨Ï†ÅÏÑú']?.files || []).length > 0;
            const hasRequestFile = (properties['ÏöîÏ≤≠ÏÑú']?.files || []).length > 0;
            
            this.lastFileCheckMap.set(pageId, {
              hasQuote: hasQuoteFile,
              hasRequest: hasRequestFile,
              lastChecked: Date.now()
            });
            
            console.log(`   ÌååÏùº ÏÉÅÌÉú: Í≤¨Ï†ÅÏÑú=${hasQuoteFile ? '‚úÖ' : '‚ùå'}, ÏöîÏ≤≠ÏÑú=${hasRequestFile ? '‚úÖ' : '‚ùå'}`);
            
            // ÌååÏùº Ï†ïÎ≥¥ ÏÉÅÏÑ∏ Ï∂úÎ†•
            if (hasQuoteFile || hasRequestFile) {
              console.log(`   Í≤¨Ï†ÅÏÑú ÌååÏùº: ${properties['Í≤¨Ï†ÅÏÑú']?.files?.map((f: any) => f.name).join(', ') || 'ÏóÜÏùå'}`);
              console.log(`   ÏöîÏ≤≠ÏÑú ÌååÏùº: ${properties['ÏöîÏ≤≠ÏÑú']?.files?.map((f: any) => f.name).join(', ') || 'ÏóÜÏùå'}`);
            }
          }
        }
      }
      
      console.log(`‚úÖ Ï¥àÍ∏∞ ÏÉÅÌÉú Î°úÎìú ÏôÑÎ£å (Ï¥ù ${this.lastCheckedPages.size}Í∞ú, Í≤¨Ï†ÅÍ≤ÄÌÜ† ${quoteReviewCount}Í∞ú)`);
    } catch (error) {
      console.error('‚ùå Ï¥àÍ∏∞ ÏÉÅÌÉú Î°úÎìú Ïã§Ìå®:', error);
      if (error instanceof Error) {
        console.error('Ïò§Î•ò ÏÉÅÏÑ∏:', error.message);
      }
    }
  }

  /**
   * ÏÉÅÌÉú Î≥ÄÍ≤Ω ÌôïÏù∏
   */
  private async checkStatusChanges() {
    try {
      const databaseId = this.formatDatabaseId(process.env.NOTION_DATABASE_ID!);
      
      console.log('üîç ÏÉÅÌÉú Î≥ÄÍ≤Ω ÌôïÏù∏ Ï§ë...');
      console.log(`   Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ID: ${databaseId}`);
      
      const response = await this.notion.databases.query({
        database_id: databaseId,
        filter: {
          property: 'ÌñâÏÇ¨ ÏÉÅÌÉú',
          status: {
            does_not_equal: 'ÏôÑÎ£å'
          }
        }
      });

      console.log(`   Ï°∞ÌöåÎêú ÌéòÏù¥ÏßÄ Ïàò: ${response.results.length}`);

      let changesDetected = 0;
      let fileCheckCount = 0;
      let quoteReviewCount = 0;

      for (const page of response.results) {
        if (page.object !== 'page') continue;
        
        const pageId = page.id;
        const properties = (page as any).properties;
        const currentStatus = properties['ÌñâÏÇ¨ ÏÉÅÌÉú']?.status?.name;
        const eventName = properties['ÌñâÏÇ¨Î™Ö']?.title?.[0]?.text?.content || 'Unknown';
        
        console.log(`   üìã ${eventName}: ${currentStatus}`);
        
        // Í≤¨Ï†Å Í≤ÄÌÜ† ÏÉÅÌÉú Ïπ¥Ïö¥Ìä∏
        if (currentStatus === 'Í≤¨Ï†Å Í≤ÄÌÜ†') {
          quoteReviewCount++;
        }
        
        const lastStatus = this.lastCheckedPages.get(pageId);

        // 1. ÏÉÅÌÉú Î≥ÄÍ≤Ω Í∞êÏßÄ
        if (lastStatus && lastStatus !== currentStatus) {
          console.log(`üîÑ ÏÉÅÌÉú Î≥ÄÍ≤Ω Í∞êÏßÄ: ${eventName} (${lastStatus} ‚Üí ${currentStatus})`);
          changesDetected++;
          
          // ÏûêÎèôÌôî Ïã§Ìñâ
          await this.handleStatusChange(pageId, currentStatus, lastStatus, eventName);
        }

        // 2. Í≤¨Ï†Å Í≤ÄÌÜ† ÏÉÅÌÉúÏù∏ Î™®Îì† ÌéòÏù¥ÏßÄÏùò ÌååÏùº Ï≤¥ÌÅ¨
        if (currentStatus === 'Í≤¨Ï†Å Í≤ÄÌÜ†') {
          fileCheckCount++;
          console.log(`üìÑ ÌååÏùº Ï≤¥ÌÅ¨ ÏãúÏûë: ${eventName}`);
          
          // ÌååÏùº ÏÜçÏÑ± ÏÉÅÏÑ∏ Î°úÍ∑∏
          console.log(`   Í≤¨Ï†ÅÏÑú ÏÜçÏÑ±:`, JSON.stringify(properties['Í≤¨Ï†ÅÏÑú'], null, 2));
          console.log(`   ÏöîÏ≤≠ÏÑú ÏÜçÏÑ±:`, JSON.stringify(properties['ÏöîÏ≤≠ÏÑú'], null, 2));
          
          // ÌååÏùº Ï†ïÎ≥¥ ÏßÅÏ†ë ÌôïÏù∏
          const quoteFiles = properties['Í≤¨Ï†ÅÏÑú']?.files || [];
          const requestFiles = properties['ÏöîÏ≤≠ÏÑú']?.files || [];
          
          const hasQuoteFile = quoteFiles.length > 0;
          const hasRequestFile = requestFiles.length > 0;
          
          console.log(`   Í≤¨Ï†ÅÏÑú: ${hasQuoteFile ? '‚úÖ' : '‚ùå'} (${quoteFiles.length}Í∞ú)`);
          console.log(`   ÏöîÏ≤≠ÏÑú: ${hasRequestFile ? '‚úÖ' : '‚ùå'} (${requestFiles.length}Í∞ú)`);
          
          // ÎîîÎ≤ÑÍπÖÏùÑ ÏúÑÌïú ÌååÏùº Ï†ïÎ≥¥ Ï∂úÎ†•
          if (hasQuoteFile) {
            console.log(`   Í≤¨Ï†ÅÏÑú ÌååÏùº:`, quoteFiles.map((f: any) => f.name || 'unnamed').join(', '));
          }
          if (hasRequestFile) {
            console.log(`   ÏöîÏ≤≠ÏÑú ÌååÏùº:`, requestFiles.map((f: any) => f.name || 'unnamed').join(', '));
          }
          
          // Ïù¥Ï†Ñ ÌååÏùº ÏÉÅÌÉú Í∞ÄÏ†∏Ïò§Í∏∞
          const lastFileCheck = this.lastFileCheckMap.get(pageId);
          console.log(`   Ïù¥Ï†Ñ ÌååÏùº ÏÉÅÌÉú:`, lastFileCheck);
          
          // ÌååÏùº ÏÉÅÌÉú Î≥ÄÍ≤Ω Í∞êÏßÄ
          const fileStateChanged = !lastFileCheck || 
                                 lastFileCheck.hasQuote !== hasQuoteFile || 
                                 lastFileCheck.hasRequest !== hasRequestFile;
          
          if (fileStateChanged) {
            console.log(`üìé ÌååÏùº ÏÉÅÌÉú Î≥ÄÍ≤Ω Í∞êÏßÄ: ${eventName}`);
            console.log(`   Ïù¥Ï†Ñ: Í≤¨Ï†ÅÏÑú=${lastFileCheck?.hasQuote ? '‚úÖ' : '‚ùå'}, ÏöîÏ≤≠ÏÑú=${lastFileCheck?.hasRequest ? '‚úÖ' : '‚ùå'}`);
            console.log(`   ÌòÑÏû¨: Í≤¨Ï†ÅÏÑú=${hasQuoteFile ? '‚úÖ' : '‚ùå'}, ÏöîÏ≤≠ÏÑú=${hasRequestFile ? '‚úÖ' : '‚ùå'}`);
          }
          
          // Îëê ÌååÏùºÏù¥ Î™®Îëê ÏûàÏúºÎ©¥ ÏäπÏù∏ÏúºÎ°ú Î≥ÄÍ≤Ω
          if (hasQuoteFile && hasRequestFile) {
            console.log(`üéØ Îëê ÌååÏùº Î™®Îëê ÌôïÏù∏Îê®!`);
            
            // Ïù¥Ï†ÑÏóê Îëê ÌååÏùºÏù¥ Î™®Îëê ÏóÜÏóàÎçò Í≤ΩÏö∞Îßå Ï≤òÎ¶¨
            if (!lastFileCheck || !lastFileCheck.hasQuote || !lastFileCheck.hasRequest) {
              console.log(`‚úÖ ÌååÏùº ÏóÖÎ°úÎìú ÏôÑÎ£å Í∞êÏßÄ! ${eventName} - Í≤¨Ï†Å ÏäπÏù∏ÏúºÎ°ú Î≥ÄÍ≤ΩÌï©ÎãàÎã§.`);
              await this.updateToApproved(pageId, eventName);
              changesDetected++;
            } else {
              console.log(`   Ïù¥ÎØ∏ Ï≤òÎ¶¨Îêú ÌååÏùºÏûÖÎãàÎã§.`);
            }
          } else if (fileStateChanged && (hasQuoteFile || hasRequestFile)) {
            console.log(`üìã ÌååÏùº ÏùºÎ∂ÄÎßå ÏóÖÎ°úÎìúÎê®`);
            // ÌååÏùºÏù¥ ÌïòÎÇòÎßå ÏóÖÎ°úÎìúÎêú Í≤ΩÏö∞ ÏïåÎ¶º
            await this.addPartialUploadComment(pageId, hasQuoteFile, hasRequestFile);
          }
          
          // ÌòÑÏû¨ ÌååÏùº ÏÉÅÌÉú Ï†ÄÏû•
          this.lastFileCheckMap.set(pageId, {
            hasQuote: hasQuoteFile,
            hasRequest: hasRequestFile,
            lastChecked: Date.now()
          });
        }

        // 3. ÏÉàÎ°úÏö¥ ÌéòÏù¥ÏßÄ Í∞êÏßÄ
        if (!lastStatus && currentStatus) {
          console.log(`üÜï ÏÉàÎ°úÏö¥ ÌñâÏÇ¨ Í∞êÏßÄ: ${eventName} (${currentStatus})`);
          
          // ÏÉà ÌéòÏù¥ÏßÄÎèÑ ÌååÏùº Ï≤¥ÌÅ¨ ÎßµÏóê Ï∂îÍ∞Ä
          if (currentStatus === 'Í≤¨Ï†Å Í≤ÄÌÜ†') {
            const hasQuoteFile = (properties['Í≤¨Ï†ÅÏÑú']?.files || []).length > 0;
            const hasRequestFile = (properties['ÏöîÏ≤≠ÏÑú']?.files || []).length > 0;
            
            this.lastFileCheckMap.set(pageId, {
              hasQuote: hasQuoteFile,
              hasRequest: hasRequestFile,
              lastChecked: Date.now()
            });
          }
        }

        // ÌòÑÏû¨ ÏÉÅÌÉú Ï†ÄÏû•
        if (currentStatus) {
          this.lastCheckedPages.set(pageId, currentStatus);
        }
      }

      console.log(`‚úÖ Ï≤¥ÌÅ¨ ÏôÑÎ£å: ${response.results.length}Í∞ú Ï§ë Í≤¨Ï†ÅÍ≤ÄÌÜ† ${quoteReviewCount}Í∞ú, ÌååÏùºÏ≤¥ÌÅ¨ ${fileCheckCount}Í∞ú, Î≥ÄÍ≤ΩÍ∞êÏßÄ ${changesDetected}Í∞ú`);

      // ÏôÑÎ£åÎêú ÌñâÏÇ¨Îì§ Ï†ïÎ¶¨
      this.cleanupCompletedEvents(response.results);

    } catch (error) {
      console.error('‚ùå ÏÉÅÌÉú Î≥ÄÍ≤Ω ÌôïÏù∏ Ï§ë Ïò§Î•ò:', error);
      if (error instanceof Error) {
        console.error('Ïò§Î•ò ÏÉÅÏÑ∏:', error.message);
        console.error('Ïä§ÌÉù:', error.stack);
      }
    }
  }

  /**
   * Î∂ÄÎ∂Ñ ÏóÖÎ°úÎìú ÏïåÎ¶º ÎåìÍ∏Ä
   */
  private async addPartialUploadComment(pageId: string, hasQuote: boolean, hasRequest: boolean) {
    const missingFile = !hasQuote ? 'Í≤¨Ï†ÅÏÑú' : 'ÏöîÏ≤≠ÏÑú';
    
    try {
      await this.notion.comments.create({
        parent: { page_id: pageId },
        rich_text: [
          {
            type: 'text',
            text: { 
              content: `üìé ÌååÏùº ÏóÖÎ°úÎìú ÌôïÏù∏\n\n‚úÖ ÏóÖÎ°úÎìú ÏôÑÎ£å: ${hasQuote ? 'Í≤¨Ï†ÅÏÑú' : 'ÏöîÏ≤≠ÏÑú'}\n‚ùå ÏóÖÎ°úÎìú ÎåÄÍ∏∞: ${missingFile}\n\n${missingFile}Î•º ÏóÖÎ°úÎìúÌïòÎ©¥ ÏûêÎèôÏúºÎ°ú "Í≤¨Ï†Å ÏäπÏù∏" ÏÉÅÌÉúÎ°ú Î≥ÄÍ≤ΩÎê©ÎãàÎã§.\n\n‚è∞ ÌôïÏù∏ ÏãúÍ∞Ñ: ${new Date().toLocaleString()}` 
            }
          }
        ]
      });
    } catch (error) {
      console.error('ÎåìÍ∏Ä Ï∂îÍ∞Ä Ïã§Ìå®:', error);
    }
  }

  /**
   * Í≤¨Ï†Å ÏäπÏù∏ÏúºÎ°ú ÏÉÅÌÉú Î≥ÄÍ≤Ω
   */
  private async updateToApproved(pageId: string, eventName: string) {
    try {
      console.log(`üîÑ ${eventName} - Í≤¨Ï†Å ÏäπÏù∏ÏúºÎ°ú Î≥ÄÍ≤Ω ÏãúÏûë`);
      
      // 1. ÏÉÅÌÉúÎ•º "Í≤¨Ï†Å ÏäπÏù∏"ÏúºÎ°ú Î≥ÄÍ≤Ω
      await this.notion.pages.update({
        page_id: pageId,
        properties: {
          'ÌñâÏÇ¨ ÏÉÅÌÉú': {
            status: { name: 'Í≤¨Ï†Å ÏäπÏù∏' }
          }
        }
      });

      console.log(`‚úÖ ÏÉÅÌÉú Î≥ÄÍ≤Ω ÏôÑÎ£å`);

      // 2. ÎåìÍ∏Ä Ï∂îÍ∞Ä
      await this.notion.comments.create({
        parent: { page_id: pageId },
        rich_text: [
          {
            type: 'text',
            text: { 
              content: `‚úÖ ÌååÏùº ÏóÖÎ°úÎìú ÏôÑÎ£å - ÏûêÎèô ÏäπÏù∏\n\nÍ≤¨Ï†ÅÏÑúÏôÄ ÏöîÏ≤≠ÏÑúÍ∞Ä Î™®Îëê ÏóÖÎ°úÎìúÎêòÏñ¥ ÏûêÎèôÏúºÎ°ú "Í≤¨Ï†Å ÏäπÏù∏" ÏÉÅÌÉúÎ°ú Î≥ÄÍ≤ΩÎêòÏóàÏäµÎãàÎã§.\n\nüìé ÏóÖÎ°úÎìú ÌååÏùº:\n‚Ä¢ Í≤¨Ï†ÅÏÑú ‚úÖ\n‚Ä¢ ÏöîÏ≤≠ÏÑú ‚úÖ\n\nüöö Îã§Ïùå Îã®Í≥Ñ:\n1. Î∞∞Ï∞® Ï†ïÎ≥¥Í∞Ä ÏûêÎèô ÏÉùÏÑ±Îê©ÎãàÎã§\n2. ÏÑ§Ïπò Ïù∏Î†• Î∞∞Ï†ïÏùÑ ÏßÑÌñâÌï¥Ï£ºÏÑ∏Ïöî\n\n‚è∞ Î≥ÄÍ≤Ω ÏãúÍ∞Ñ: ${new Date().toLocaleString()}` 
            }
          }
        ]
      });

      // 3. ÏÉÅÌÉú Î≥ÄÍ≤Ω Í∏∞Î°ù ÏóÖÎç∞Ïù¥Ìä∏
      this.lastCheckedPages.set(pageId, 'Í≤¨Ï†Å ÏäπÏù∏');

      // 4. ÏûêÎèôÌôî Ïã§Ìñâ (Î∞∞Ï∞® Ï†ïÎ≥¥ ÏÉùÏÑ±)
      await this.automation.onStatusQuoteApproved(pageId);
      
      console.log(`‚úÖ ${eventName} - Í≤¨Ï†Å ÏäπÏù∏ÏúºÎ°ú ÏûêÎèô Î≥ÄÍ≤Ω ÏôÑÎ£å`);
      
    } catch (error) {
      console.error(`‚ùå Í≤¨Ï†Å ÏäπÏù∏ Î≥ÄÍ≤Ω Ïã§Ìå® (${eventName}):`, error);
      
      // Ïò§Î•ò Î∞úÏÉù Ïãú ÎåìÍ∏Ä Ï∂îÍ∞Ä
      try {
        await this.notion.comments.create({
          parent: { page_id: pageId },
          rich_text: [
            {
              type: 'text',
              text: { 
                content: `‚ùå ÏûêÎèô ÏäπÏù∏ Ïã§Ìå®\n\nÏò§Î•ò: ${error instanceof Error ? error.message : 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò'}\n\nÎã¥ÎãπÏûêÍ∞Ä ÏàòÎèôÏúºÎ°ú "Í≤¨Ï†Å ÏäπÏù∏"ÏúºÎ°ú Î≥ÄÍ≤ΩÌï¥Ï£ºÏÑ∏Ïöî.\n\n‚è∞ Ïò§Î•ò Î∞úÏÉù ÏãúÍ∞Ñ: ${new Date().toLocaleString()}` 
              }
            }
          ]
        });
      } catch (commentError) {
        console.error('Ïò§Î•ò ÎåìÍ∏Ä Ï∂îÍ∞Ä Ïã§Ìå®:', commentError);
      }
    }
  }

  /**
   * ÏÉÅÌÉú Î≥ÄÍ≤Ω Ï≤òÎ¶¨
   */
  private async handleStatusChange(pageId: string, newStatus: string, oldStatus: string, eventName: string) {
    try {
      console.log(`üéØ ÏûêÎèôÌôî Ïã§Ìñâ: ${eventName} (${oldStatus} ‚Üí ${newStatus})`);
      
      switch (newStatus) {
        case 'Í≤¨Ï†Å Í≤ÄÌÜ†':
          console.log('üìä Í≤¨Ï†Å Ï†ïÎ≥¥ ÏûêÎèô ÏÉùÏÑ± ÏãúÏûë...');
          await this.automation.onStatusQuoteReview(pageId);
          console.log('‚úÖ Í≤¨Ï†Å Ï†ïÎ≥¥ ÏÉùÏÑ± ÏôÑÎ£å');
          break;
          
        case 'Í≤¨Ï†Å ÏäπÏù∏':
          console.log('üöö Î∞∞Ï∞® Ï†ïÎ≥¥ ÏûêÎèô ÏÉùÏÑ± ÏãúÏûë...');
          await this.automation.onStatusQuoteApproved(pageId);
          console.log('‚úÖ Î∞∞Ï∞® Ï†ïÎ≥¥ ÏÉùÏÑ± ÏôÑÎ£å');
          break;
          
        case 'Íµ¨Ïù∏ ÏôÑÎ£å':
          console.log('üë∑ Íµ¨Ïù∏ ÏôÑÎ£å ÌîÑÎ°úÏÑ∏Ïä§ ÏãúÏûë...');
          await this.automation.onStatusRecruitmentComplete(pageId);
          console.log('‚úÖ Íµ¨Ïù∏ ÏôÑÎ£å ÌîÑÎ°úÏÑ∏Ïä§ ÏôÑÎ£å');
          break;
          
        default:
          console.log(`‚ÑπÔ∏è "${newStatus}" ÏÉÅÌÉúÏóê ÎåÄÌïú ÏûêÎèôÌôîÎäî ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.`);
      }
      
    } catch (error) {
      console.error(`‚ùå ÏÉÅÌÉú Î≥ÄÍ≤Ω Ï≤òÎ¶¨ Ïã§Ìå® (${eventName}):`, error);
      
      // Ïò§Î•ò Î∞úÏÉù Ïãú NotionÏóê ÎåìÍ∏Ä Ï∂îÍ∞Ä
      try {
        await this.notion.comments.create({
          parent: { page_id: pageId },
          rich_text: [
            {
              type: 'text',
              text: { 
                content: `‚ùå ÏûêÎèôÌôî Ïò§Î•ò Î∞úÏÉù\n\nÏÉÅÌÉú: ${oldStatus} ‚Üí ${newStatus}\nÏò§Î•ò: ${error instanceof Error ? error.message : 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò'}\n\nÎã¥ÎãπÏûê ÌôïÏù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.\n\n‚è∞ Ïò§Î•ò Î∞úÏÉù ÏãúÍ∞Ñ: ${new Date().toLocaleString()}` 
              }
            }
          ]
        });
      } catch (commentError) {
        console.error('ÎåìÍ∏Ä Ï∂îÍ∞Ä Ïã§Ìå®:', commentError);
      }
    }
  }

  /**
   * ÏôÑÎ£åÎêú ÌñâÏÇ¨Îì§ Î©îÎ™®Î¶¨ÏóêÏÑú Ï†ïÎ¶¨
   */
  private cleanupCompletedEvents(activePages: any[]) {
    const activePageIds = new Set(activePages.filter(p => p.object === 'page').map(page => page.id));
    const currentPageIds = Array.from(this.lastCheckedPages.keys());
    
    for (const pageId of currentPageIds) {
      if (!activePageIds.has(pageId)) {
        this.lastCheckedPages.delete(pageId);
        this.lastFileCheckMap.delete(pageId);
        console.log(`üóëÔ∏è ÏôÑÎ£åÎêú ÌñâÏÇ¨ Ï†ïÎ¶¨: ${pageId}`);
      }
    }
  }

  /**
   * Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ID Ìè¨Îß∑ Î≥ÄÌôò
   */
  private formatDatabaseId(id: string): string {
    // ÌïòÏù¥Ìîà Ï†úÍ±∞Îêú IDÎ•º ÌïòÏù¥Ìîà Ìè¨Ìï® ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò
    if (!id.includes('-') && id.length === 32) {
      return `${id.slice(0, 8)}-${id.slice(8, 12)}-${id.slice(12, 16)}-${id.slice(16, 20)}-${id.slice(20)}`;
    }
    return id;
  }

  /**
   * ÌòÑÏû¨ Ìè¥ÎßÅ ÏÉÅÌÉú ÌôïÏù∏
   */
  getPollingStatus() {
    return {
      isPolling: this.isPolling,
      trackedPages: this.lastCheckedPages.size,
      fileTrackingPages: this.lastFileCheckMap.size,
      lastCheckedPages: Array.from(this.lastCheckedPages.entries()).map(([pageId, status]) => ({
        pageId,
        status
      })),
      fileStatus: Array.from(this.lastFileCheckMap.entries()).map(([pageId, status]) => ({
        pageId,
        hasQuote: status.hasQuote,
        hasRequest: status.hasRequest,
        lastChecked: new Date(status.lastChecked).toLocaleString()
      }))
    };
  }

  /**
   * ÏàòÎèôÏúºÎ°ú ÌäπÏ†ï ÌéòÏù¥ÏßÄ ÏÉÅÌÉú Î≥ÄÍ≤Ω Ï≤òÎ¶¨
   */
  async manualTrigger(pageId: string, status: string) {
    try {
      console.log(`üîß ÏàòÎèô Ìä∏Î¶¨Í±∞ Ïã§Ìñâ: ${pageId} ‚Üí ${status}`);
      
      switch (status) {
        case 'Í≤¨Ï†Å Í≤ÄÌÜ†':
          await this.automation.onStatusQuoteReview(pageId);
          break;
        case 'Í≤¨Ï†Å ÏäπÏù∏':
          await this.automation.onStatusQuoteApproved(pageId);
          break;
        case 'Íµ¨Ïù∏ ÏôÑÎ£å':
          await this.automation.onStatusRecruitmentComplete(pageId);
          break;
        default:
          throw new Error(`ÏßÄÏõêÌïòÏßÄ ÏïäÎäî ÏÉÅÌÉú: ${status}`);
      }
      
      console.log('‚úÖ ÏàòÎèô Ìä∏Î¶¨Í±∞ ÏôÑÎ£å');
      return { success: true };
      
    } catch (error) {
      console.error('‚ùå ÏàòÎèô Ìä∏Î¶¨Í±∞ Ïã§Ìå®:', error);
      throw error;
    }
  }

  /**
   * ÌäπÏ†ï ÌéòÏù¥ÏßÄÏùò ÌååÏùº ÏÉÅÌÉú ÏàòÎèô ÌôïÏù∏
   */
  async checkPageFiles(pageId: string) {
    try {
      const page = await this.notion.pages.retrieve({ page_id: pageId });
      const properties = (page as any).properties;
      const eventName = properties['ÌñâÏÇ¨Î™Ö']?.title?.[0]?.text?.content || 'Unknown';
      const currentStatus = properties['ÌñâÏÇ¨ ÏÉÅÌÉú']?.status?.name;
      
      console.log(`üìÑ ÌååÏùº ÏÉÅÌÉú ÌôïÏù∏ - ${eventName} (${currentStatus}):`);
      console.log(`   - Í≤¨Ï†ÅÏÑú: ${properties['Í≤¨Ï†ÅÏÑú']?.files?.length > 0 ? '‚úÖ' : '‚ùå'}`);
      console.log(`   - ÏöîÏ≤≠ÏÑú: ${properties['ÏöîÏ≤≠ÏÑú']?.files?.length > 0 ? '‚úÖ' : '‚ùå'}`);
      
      return {
        eventName,
        status: currentStatus,
        hasQuoteFile: properties['Í≤¨Ï†ÅÏÑú']?.files?.length > 0,
        hasRequestFile: properties['ÏöîÏ≤≠ÏÑú']?.files?.length > 0,
        quoteFiles: properties['Í≤¨Ï†ÅÏÑú']?.files || [],
        requestFiles: properties['ÏöîÏ≤≠ÏÑú']?.files || []
      };
    } catch (error) {
      console.error('ÌéòÏù¥ÏßÄ ÌååÏùº ÌôïÏù∏ Ïã§Ìå®:', error);
      throw error;
    }
  }
}

/**
 * Ìè¥ÎßÅ ÏÑúÎπÑÏä§ Ïù∏Ïä§ÌÑ¥Ïä§ Í∞ÄÏ†∏Ïò§Í∏∞ (Ïã±Í∏ÄÌÜ§)
 */
export function getPollingService(): NotionPollingService {
  if (!pollingServiceInstance) {
    pollingServiceInstance = new NotionPollingService();
  }
  return pollingServiceInstance;
}

/**
 * Ìè¥ÎßÅ ÏÑúÎπÑÏä§ ÏãúÏûë
 */
export async function startPollingService() {
  const service = getPollingService();
  await service.startPolling();
}

/**
 * Ìè¥ÎßÅ ÏÑúÎπÑÏä§ Ï§ëÏßÄ
 */
export function stopPollingService() {
  if (pollingServiceInstance) {
    pollingServiceInstance.stopPolling();
  }
}