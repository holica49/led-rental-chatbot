import { McpError, ErrorCode } from '@modelcontextprotocol/sdk/types.js';
import { Client } from '@notionhq/client';

// Notion ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï¥àÍ∏∞Ìôî
const notion = new Client({
  auth: process.env.NOTION_API_KEY
});

const DATABASE_ID = process.env.NOTION_DATABASE_ID || '';

interface NotionToolInput {
  serviceType: string;
  eventName: string;
  customerName: string;
  venue: string;
  contactName: string;
  contactTitle: string;
  contactPhone: string;
  eventSchedule?: string;
  installSchedule?: string;
  rehearsalSchedule?: string;
  dismantleSchedule?: string;
  totalQuoteAmount?: number;
  additionalRequests?: string;
  
  // LED Í¥ÄÎ†®
  led1?: any;
  led2?: any;
  led3?: any;
  led4?: any;
  led5?: any;
  totalModuleCount?: number;
  ledModuleCost?: number;
  
  // ÏÑ§Ïπò Í¥ÄÎ†®
  installEnvironment?: string;
  installSpace?: string;
  inquiryPurpose?: string;
  installBudget?: string;
  
  // Î†åÌÉà Í¥ÄÎ†®
  supportStructureType?: string;
  periodSurchargeAmount?: number;
  transportCost?: number;
  
  // Î©§Î≤ÑÏâΩ Í¥ÄÎ†®
  memberCode?: string;
  structureCost?: number;
  controllerCost?: number;
  powerCost?: number;
  installationCost?: number;
  operatorCost?: number;
  maxStageHeight?: number;
  installationWorkers?: number;
  installationWorkerRange?: string;
  controllerCount?: number;
  powerRequiredCount?: number;
  transportRange?: string;
  structureUnitPrice?: number;
  structureUnitPriceDescription?: string;
}

export const notionMCPTool = {
  name: 'create_notion_estimate',
  description: 'Create LED rental/installation estimate in Notion database',
  
  inputSchema: {
    type: 'object' as const,
    properties: {
      serviceType: { type: 'string', description: 'ÏÑúÎπÑÏä§ Ïú†Ìòï (Î†åÌÉà/ÏÑ§Ïπò/Î©§Î≤ÑÏâΩ)' },
      eventName: { type: 'string', description: 'ÌñâÏÇ¨Î™Ö' },
      customerName: { type: 'string', description: 'Í≥†Í∞ùÏÇ¨Î™Ö' },
      venue: { type: 'string', description: 'ÌñâÏÇ¨Ïû•' },
      contactName: { type: 'string', description: 'Îã¥ÎãπÏûêÎ™Ö' },
      contactTitle: { type: 'string', description: 'ÏßÅÍ∏â' },
      contactPhone: { type: 'string', description: 'Ïó∞ÎùΩÏ≤ò' }
    },
    required: ['serviceType', 'eventName', 'customerName', 'contactName', 'contactPhone']
  },

  handler: async (args: NotionToolInput) => {
    try {
      if (!DATABASE_ID) {
        throw new McpError(ErrorCode.InvalidRequest, 'Notion database ID not configured');
      }

      // Notion ÌéòÏù¥ÏßÄ ÏÜçÏÑ± Íµ¨ÏÑ±
      const properties = buildNotionProperties(args);

      // Notion ÌéòÏù¥ÏßÄ ÏÉùÏÑ±
      const response = await notion.pages.create({
        parent: { database_id: DATABASE_ID },
        properties,
        children: buildNotionContent(args)
      });

      return {
        id: response.id,
        url: `https://notion.so/${response.id.replace(/-/g, '')}`,
        message: `‚úÖ Notion Í≤¨Ï†ÅÏÑúÍ∞Ä ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§: ${args.eventName}`
      };

    } catch (error) {
      console.error('Notion creation error:', error);
      throw new McpError(
        ErrorCode.InternalError,
        `Failed to create Notion page: ${error instanceof Error ? error.message : 'Unknown error'}`
      );
    }
  }
};

// Notion ÏÜçÏÑ± ÎπåÎìú Ìï®Ïàò
function buildNotionProperties(args: NotionToolInput): any {
  const properties: any = {
    'ÌñâÏÇ¨Î™Ö': { title: [{ text: { content: args.eventName } }] },
    'ÏÑúÎπÑÏä§Ïú†Ìòï': { select: { name: args.serviceType } },
    'Í≥†Í∞ùÏÇ¨': { rich_text: [{ text: { content: args.customerName } }] },
    'ÌñâÏÇ¨Ïû•': { rich_text: [{ text: { content: args.venue || '' } }] },
    'Îã¥ÎãπÏûê': { rich_text: [{ text: { content: `${args.contactName} ${args.contactTitle || ''}` } }] },
    'Ïó∞ÎùΩÏ≤ò': { phone_number: args.contactPhone },
    'ÏÉÅÌÉú': { select: { name: 'Í≤¨Ï†ÅÏöîÏ≤≠' } },
    'ÏûëÏÑ±Ïùº': { date: { start: new Date().toISOString().split('T')[0] } }
  };

  // Í≤¨Ï†Å Í∏àÏï°
  if (args.totalQuoteAmount !== undefined) {
    properties['Í≤¨Ï†ÅÍ∏àÏï°'] = { number: args.totalQuoteAmount };
  }

  // ÌñâÏÇ¨ ÏùºÏ†ï
  if (args.eventSchedule) {
    const dates = args.eventSchedule.split(' ~ ');
    if (dates.length === 2) {
      properties['ÌñâÏÇ¨ÏùºÏ†ï'] = {
        date: {
          start: dates[0],
          end: dates[1]
        }
      };
    }
  }

  // ÏÑúÎπÑÏä§Î≥Ñ Ï∂îÍ∞Ä ÏÜçÏÑ±
  if (args.serviceType === 'ÏÑ§Ïπò') {
    if (args.installEnvironment) {
      properties['ÏÑ§ÏπòÌôòÍ≤Ω'] = { select: { name: args.installEnvironment } };
    }
    if (args.inquiryPurpose) {
      properties['Î¨∏ÏùòÎ™©Ï†Å'] = { rich_text: [{ text: { content: args.inquiryPurpose } }] };
    }
  }

  if (args.serviceType === 'Î©§Î≤ÑÏâΩ' && args.memberCode) {
    properties['Î©§Î≤ÑÏΩîÎìú'] = { rich_text: [{ text: { content: args.memberCode } }] };
  }

  return properties;
}

// Notion ÌéòÏù¥ÏßÄ ÏΩòÌÖêÏ∏† ÎπåÎìú Ìï®Ïàò
function buildNotionContent(args: NotionToolInput): any[] {
  const blocks: any[] = [];

  // Í∏∞Î≥∏ Ï†ïÎ≥¥ ÏÑπÏÖò
  blocks.push(
    {
      object: 'block',
      type: 'heading_2',
      heading_2: {
        rich_text: [{ type: 'text', text: { content: 'üìã Í∏∞Î≥∏ Ï†ïÎ≥¥' } }]
      }
    },
    {
      object: 'block',
      type: 'paragraph',
      paragraph: {
        rich_text: [
          { type: 'text', text: { content: `üè¢ Í≥†Í∞ùÏÇ¨: ${args.customerName}\n` } },
          { type: 'text', text: { content: `üìç ÌñâÏÇ¨Ïû•: ${args.venue || '-'}\n` } },
          { type: 'text', text: { content: `üë§ Îã¥ÎãπÏûê: ${args.contactName} ${args.contactTitle || ''}\n` } },
          { type: 'text', text: { content: `üìû Ïó∞ÎùΩÏ≤ò: ${args.contactPhone}` } }
        ]
      }
    }
  );

  // LED ÏÇ¨Ïñë ÏÑπÏÖò
  const ledSpecs = [args.led1, args.led2, args.led3, args.led4, args.led5].filter(Boolean);
  if (ledSpecs.length > 0) {
    blocks.push(
      {
        object: 'block',
        type: 'heading_2',
        heading_2: {
          rich_text: [{ type: 'text', text: { content: 'üñ•Ô∏è LED ÏÇ¨Ïñë' } }]
        }
      }
    );

    ledSpecs.forEach((led, index) => {
      blocks.push({
        object: 'block',
        type: 'bulleted_list_item',
        bulleted_list_item: {
          rich_text: [{
            type: 'text',
            text: { content: `LED ${index + 1}: ${led.size} (Î¨¥ÎåÄÎÜíÏù¥: ${led.stageHeight}mm)` }
          }]
        }
      });
    });
  }

  // Í≤¨Ï†Å ÏÉÅÏÑ∏ ÏÑπÏÖò
  if (args.totalQuoteAmount) {
    blocks.push(
      {
        object: 'block',
        type: 'heading_2',
        heading_2: {
          rich_text: [{ type: 'text', text: { content: 'üí∞ Í≤¨Ï†Å ÏÉÅÏÑ∏' } }]
        }
      },
      {
        object: 'block',
        type: 'table',
        table: {
          table_width: 2,
          has_column_header: true,
          children: buildQuoteTable(args)
        }
      }
    );
  }

  // Ï∂îÍ∞Ä ÏöîÏ≤≠ÏÇ¨Ìï≠
  if (args.additionalRequests && args.additionalRequests !== 'ÏóÜÏùå') {
    blocks.push(
      {
        object: 'block',
        type: 'heading_2',
        heading_2: {
          rich_text: [{ type: 'text', text: { content: 'üí¨ Ï∂îÍ∞Ä ÏöîÏ≤≠ÏÇ¨Ìï≠' } }]
        }
      },
      {
        object: 'block',
        type: 'paragraph',
        paragraph: {
          rich_text: [{ type: 'text', text: { content: args.additionalRequests } }]
        }
      }
    );
  }

  return blocks;
}

// Í≤¨Ï†Å ÌÖåÏù¥Î∏î ÏÉùÏÑ± Ìï®Ïàò
function buildQuoteTable(args: NotionToolInput): any[] {
  const rows: any[] = [
    // Ìó§Îçî Ìñâ
    {
      type: 'table_row',
      table_row: {
        cells: [
          [{ type: 'text', text: { content: 'Ìï≠Î™©', link: null }, annotations: { bold: true } }],
          [{ type: 'text', text: { content: 'Í∏àÏï°', link: null }, annotations: { bold: true } }]
        ]
      }
    }
  ];

  // Ìï≠Î™©Î≥Ñ Ìñâ Ï∂îÍ∞Ä
  const items = [
    { label: 'LED Î™®Îìà', value: args.ledModuleCost },
    { label: 'Íµ¨Ï°∞Î¨º', value: args.structureCost },
    { label: 'ÌîÑÎ°úÏÑ∏ÏÑú', value: args.controllerCost },
    { label: 'Ï†ÑÏõê', value: args.powerCost },
    { label: 'ÏÑ§ÏπòÎπÑ', value: args.installationCost },
    { label: 'Ïö¥ÏòÅÏù∏Î†•', value: args.operatorCost },
    { label: 'Ïö¥ÏÜ°ÎπÑ', value: args.transportCost },
    { label: 'Í∏∞Í∞Ñ Ìï†Ï¶ù', value: args.periodSurchargeAmount }
  ];

  items.forEach(item => {
    if (item.value !== undefined && item.value > 0) {
      rows.push({
        type: 'table_row',
        table_row: {
          cells: [
            [{ type: 'text', text: { content: item.label } }],
            [{ type: 'text', text: { content: `${item.value.toLocaleString()}Ïõê` } }]
          ]
        }
      });
    }
  });

  // Ï¥ùÏï° Ìñâ
  if (args.totalQuoteAmount) {
    rows.push({
      type: 'table_row',
      table_row: {
        cells: [
          [{ type: 'text', text: { content: 'Ï¥ùÏï° (VAT Ìè¨Ìï®)', link: null }, annotations: { bold: true } }],
          [{ 
            type: 'text', 
            text: { content: `${args.totalQuoteAmount.toLocaleString()}Ïõê` }, 
            annotations: { bold: true, color: 'blue' } 
          }]
        ]
      }
    });
  }

  return rows;
}