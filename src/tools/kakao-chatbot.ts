import express from 'express';
import bodyParser from 'body-parser';
import { calculateMultiLEDQuote } from './calculate-quote.js';
import { notionMCPTool } from './notion-mcp.js';

const app = express();
app.use(bodyParser.json());

// ngrok Ìó§Îçî Ï≤òÎ¶¨ ÎØ∏Îì§Ïõ®Ïñ¥ Ï∂îÍ∞Ä
app.use((req, res, next) => {
  // ngrok Í≤ΩÍ≥† ÌéòÏù¥ÏßÄ Ïö∞Ìöå
  res.setHeader('ngrok-skip-browser-warning', 'true');
  next();
});

app.use(bodyParser.json());

// CORS Ìó§Îçî Ï∂îÍ∞Ä
app.use((req, res, next) => {
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');
  
  if (req.method === 'OPTIONS') {
    res.sendStatus(200);
  } else {
    next();
  }
});

// ÏÇ¨Ïö©Ïûê ÏÑ∏ÏÖò Í¥ÄÎ¶¨
const userSessions: { [key: string]: any } = {};

// Ïπ¥Ïπ¥Ïò§ Ïä§ÌÇ¨ ÏÑúÎ≤Ñ ÏóîÎìúÌè¨Ïù∏Ìä∏
app.post('/skill', async (req, res) => {
  try {
    console.log('ÏöîÏ≤≠ Î∞õÏùå:', JSON.stringify(req.body, null, 2));
    
    const { userRequest, bot, action } = req.body;
    
    // userRequestÍ∞Ä ÏóÜÎäî Í≤ΩÏö∞ Í∏∞Î≥∏Í∞í ÏÑ§Ï†ï
    const userId = userRequest?.user?.id || 'default_user';
    const userMessage = userRequest?.utterance || 'ÏïàÎÖïÌïòÏÑ∏Ïöî';
    
    // ÏÇ¨Ïö©Ïûê ÏÑ∏ÏÖò Ï¥àÍ∏∞Ìôî
    if (!userSessions[userId]) {
      userSessions[userId] = {
        step: 'start',
        data: {},
        ledCount: 0,
        currentLED: 1
      };
    }
    
    const session = userSessions[userId];
    const response = await processUserMessage(userMessage, session);
    
    // Ïπ¥Ïπ¥Ïò§ Ïä§ÌÇ¨ ÏùëÎãµ ÌòïÏãù (any ÌÉÄÏûÖÏúºÎ°ú ÏÑ†Ïñ∏)
    const result: any = {
      version: "2.0",
      template: {
        outputs: [
          {
            simpleText: {
              text: response.text
            }
          }
        ]
      }
    };
    
    // quickRepliesÍ∞Ä ÏûàÏúºÎ©¥ Ï∂îÍ∞Ä
    if (response.quickReplies && response.quickReplies.length > 0) {
      result.template.quickReplies = response.quickReplies;
    }
    
    console.log('ÏùëÎãµ Ï†ÑÏÜ°:', JSON.stringify(result, null, 2));
    res.json(result);
    
  } catch (error) {
    console.error('Ïä§ÌÇ¨ Ï≤òÎ¶¨ Ïò§Î•ò:', error);
    res.json({
      version: "2.0",
      template: {
        outputs: [
          {
            simpleText: {
              text: "ÏãúÏä§ÌÖú Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî."
            }
          }
        ]
      }
    });
  }
});

// Í∞ÑÎã®Ìïú ÌÖåÏä§Ìä∏ ÏóîÎìúÌè¨Ïù∏Ìä∏ Ï∂îÍ∞Ä
app.get('/test', (req, res) => {
  res.json({
    message: "ÏÑúÎ≤ÑÍ∞Ä Ï†ïÏÉÅ ÏûëÎèô Ï§ëÏûÖÎãàÎã§!",
    timestamp: new Date().toISOString()
  });
});

app.post('/test', (req, res) => {
  res.json({
    version: "2.0",
    template: {
      outputs: [
        {
          simpleText: {
            text: "ÌÖåÏä§Ìä∏ ÏÑ±Í≥µ! ÏÑúÎ≤ÑÍ∞Ä Ï†ïÏÉÅ ÏûëÎèôÌï©ÎãàÎã§."
          }
        }
      ]
    }
  });
});

async function processUserMessage(message: string, session: any) {
  switch (session.step) {
    case 'start':
      session.step = 'confirm_customer';
      return {
        text: 'ÏïàÎÖïÌïòÏÑ∏Ïöî! LED Î†åÌÉà ÏûêÎèô Í≤¨Ï†Å ÏãúÏä§ÌÖúÏûÖÎãàÎã§.\n\nÌòπÏãú Î©îÏéÑÏù¥ÏÉÅ Í¥ÄÍ≥ÑÏûêÏù¥Ïã†Í∞ÄÏöî?',
        quickReplies: [
          {
            label: 'ÎÑ§, ÎßûÏäµÎãàÎã§',
            action: 'message',
            messageText: 'ÎÑ§'
          },
          {
            label: 'ÏïÑÎãàÏöî',
            action: 'message', 
            messageText: 'ÏïÑÎãàÏöî'
          }
        ]
      };
      
    case 'confirm_customer':
      if (message.includes('ÎÑ§') || message.includes('Îßû')) {
        session.step = 'get_event_info';
        session.data.customerName = 'Î©îÏéÑÏù¥ÏÉÅ';
        return {
          text: 'Î©îÏéÑÏù¥ÏÉÅ Í¥ÄÍ≥ÑÏûêÎãò ÏïàÎÖïÌïòÏÑ∏Ïöî! üòä\n\nÌñâÏÇ¨Î™ÖÍ≥º ÌñâÏÇ¨Ïû•ÏùÑ ÏïåÎ†§Ï£ºÏÑ∏Ïöî.\nÏòà: Ïª§ÌîºÎ∞ïÎûåÌöå / ÏàòÏõêÎ©îÏéÑ 2ÌôÄ',
          quickReplies: []
        };
      } else {
        session.step = 'start';
        return {
          text: 'Ï£ÑÏÜ°Ìï©ÎãàÎã§. ÌòÑÏû¨Îäî Î©îÏéÑÏù¥ÏÉÅ Ï†ÑÏö© ÏÑúÎπÑÏä§ÏûÖÎãàÎã§.\nÎã§Î•∏ Î¨∏ÏùòÏÇ¨Ìï≠Ïù¥ ÏûàÏúºÏãúÎ©¥ Îã¥ÎãπÏûêÏóêÍ≤å Ïó∞ÎùΩÌï¥Ï£ºÏÑ∏Ïöî.',
          quickReplies: []
        };
      }
      
    case 'get_event_info':
      const parts = message.split('/').map(p => p.trim());
      if (parts.length >= 2) {
        session.data.eventName = parts[0];
        session.data.venue = parts[1];
        session.step = 'get_led_count';
        return {
          text: `üìã ÌñâÏÇ¨Î™Ö: ${session.data.eventName}\nüìç ÌñâÏÇ¨Ïû•: ${session.data.venue}\n\nÎ™á Í∞úÏÜåÏùò LEDÍ∞Ä ÌïÑÏöîÌïòÏã†Í∞ÄÏöî?`,
          quickReplies: [
            { label: '1Í∞úÏÜå', action: 'message', messageText: '1' },
            { label: '2Í∞úÏÜå', action: 'message', messageText: '2' },
            { label: '3Í∞úÏÜå', action: 'message', messageText: '3' },
            { label: '4Í∞úÏÜå', action: 'message', messageText: '4' },
            { label: '5Í∞úÏÜå', action: 'message', messageText: '5' }
          ]
        };
      } else {
        return {
          text: 'ÌòïÏãùÏù¥ Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏäµÎãàÎã§.\nÎã§Ïãú ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.\nÏòà: Ïª§ÌîºÎ∞ïÎûåÌöå / ÏàòÏõêÎ©îÏéÑ 2ÌôÄ',
          quickReplies: []
        };
      }
      
    case 'get_led_count':
      const count = parseInt(message);
      if (count >= 1 && count <= 5) {
        session.ledCount = count;
        session.currentLED = 1;
        session.step = 'get_led_specs';
        session.data.ledSpecs = [];
        return {
          text: `Ï¥ù ${count}Í∞úÏÜåÏùò LED ÏÑ§Ï†ïÏùÑ ÏßÑÌñâÌïòÍ≤†ÏäµÎãàÎã§.\n\nLED 1Î≤àÏß∏ Í∞úÏÜåÏùò ÌÅ¨Í∏∞Î•º ÏïåÎ†§Ï£ºÏÑ∏Ïöî.\n500mm Îã®ÏúÑÎ°ú ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.`,
          quickReplies: [
            { label: '4000x2500', action: 'message', messageText: '4000x2500' },
            { label: '2000x1500', action: 'message', messageText: '2000x1500' },
            { label: '1000x1000', action: 'message', messageText: '1000x1000' }
          ]
        };
      } else {
        return {
          text: '1-5Í∞úÏÜå ÏÇ¨Ïù¥Ïùò Ïà´ÏûêÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.',
          quickReplies: [
            { label: '1Í∞úÏÜå', action: 'message', messageText: '1' },
            { label: '2Í∞úÏÜå', action: 'message', messageText: '2' },
            { label: '3Í∞úÏÜå', action: 'message', messageText: '3' }
          ]
        };
      }
      
    case 'get_led_specs':
      // LED ÌÅ¨Í∏∞ Í≤ÄÏ¶ù Î∞è Ï≤òÎ¶¨
      const sizePattern = /^(\d+)x(\d+)$/;
      const match = message.match(sizePattern);
      
      if (match) {
        const [, width, height] = match;
        if (parseInt(width) % 500 === 0 && parseInt(height) % 500 === 0) {
          session.data.ledSpecs.push({
            size: message,
            needOperator: false,
            operatorDays: 0
          });
          
          session.step = 'get_operator_needs';
          return {
            text: `LED ${session.currentLED}Î≤àÏß∏ Í∞úÏÜå: ${message}\n\nÏù¥ LEDÏóê Ïò§ÌçºÎ†àÏù¥ÌÑ∞Í∞Ä ÌïÑÏöîÌïòÏã†Í∞ÄÏöî?`,
            quickReplies: [
              { label: 'ÎÑ§, ÌïÑÏöîÌï©ÎãàÎã§', action: 'message', messageText: 'ÎÑ§' },
              { label: 'ÏïÑÎãàÏöî', action: 'message', messageText: 'ÏïÑÎãàÏöî' }
            ]
          };
        }
      }
      
      return {
        text: 'LED ÌÅ¨Í∏∞Îäî 500mm Îã®ÏúÑÎ°ú ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.\nÏòà: 4000x2500, 2000x1500',
        quickReplies: [
          { label: '4000x2500', action: 'message', messageText: '4000x2500' },
          { label: '2000x1500', action: 'message', messageText: '2000x1500' }
        ]
      };
      
    case 'get_operator_needs':
      const currentLedIndex = session.data.ledSpecs.length - 1;
      const needsOperator = message.includes('ÎÑ§') || message.includes('ÌïÑÏöî');
      
      session.data.ledSpecs[currentLedIndex].needOperator = needsOperator;
      session.data.ledSpecs[currentLedIndex].operatorDays = needsOperator ? 4 : 0;
      
      if (session.currentLED < session.ledCount) {
        session.currentLED++;
        session.step = 'get_led_specs';
        return {
          text: `LED ${session.currentLED}Î≤àÏß∏ Í∞úÏÜåÏùò ÌÅ¨Í∏∞Î•º ÏïåÎ†§Ï£ºÏÑ∏Ïöî.`,
          quickReplies: [
            { label: '4000x2500', action: 'message', messageText: '4000x2500' },
            { label: '2000x1500', action: 'message', messageText: '2000x1500' },
            { label: '1000x1000', action: 'message', messageText: '1000x1000' }
          ]
        };
      } else {
        session.step = 'get_dates';
        return {
          text: 'ÌñâÏÇ¨ ÎÇ†ÏßúÎ•º ÏïåÎ†§Ï£ºÏÑ∏Ïöî.\nÏòà: 2025-07-09',
          quickReplies: []
        };
      }
      
    case 'get_dates':
      const datePattern = /^\d{4}-\d{2}-\d{2}$/;
      if (datePattern.test(message)) {
        session.data.eventDate = message;
        session.step = 'generate_quote';
        
        // Í≤¨Ï†Å Í≥ÑÏÇ∞
        const quote = calculateMultiLEDQuote(session.data.ledSpecs);
        
        // NotionÏóê Ï†ÄÏû•
        const notionData = {
          eventName: session.data.eventName,
          customerName: session.data.customerName,
          eventDate: session.data.eventDate,
          venue: session.data.venue,
          customerContact: '010-0000-0000',
          ...session.data.ledSpecs.reduce((acc: any, led: any, index: number) => {
          acc[`led${index + 1}`] = led;
          return acc;
          }, {}),
          totalQuoteAmount: quote.total,
          totalModuleCount: quote.totalModuleCount,
          ledModuleCost: quote.ledModules.price,
          structureCost: quote.structure.totalPrice,
          controllerCost: quote.controller.totalPrice,
          powerCost: quote.power.totalPrice,
          installationCost: quote.installation.totalPrice,
          operatorCost: quote.operation.totalPrice,
          transportCost: quote.transport.price
        };
        
        await notionMCPTool.handler(notionData);
        
        // Í≤¨Ï†Å ÏöîÏïΩ ÏÉùÏÑ±
        const ledSummary = session.data.ledSpecs.map((led: any, index: number) => {
          const [w, h] = led.size.split('x').map(Number);
          const moduleCount = (w / 500) * (h / 500);
          return `LED${index + 1}: ${led.size} (${moduleCount}Í∞ú)`;
        }).join('\n');
        
        // ÏÑ∏ÏÖò Ï¥àÍ∏∞Ìôî
        userSessions[session.userId] = null;
        
        return {
          text: `‚úÖ Í≤¨Ï†ÅÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!\n\nüìã ${session.data.eventName}\nüìç ${session.data.venue}\nüìÖ ${session.data.eventDate}\n\nüñ•Ô∏è LED ÏÇ¨Ïñë:\n${ledSummary}\n\nüí∞ Ï¥ù Í≤¨Ï†Å Í∏àÏï°: ${quote.total.toLocaleString()}Ïõê (VAT Ìè¨Ìï®)\n\nÍ≤¨Ï†ÅÏÑúÍ∞Ä NotionÏóê ÏûêÎèô Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.\nÎã¥ÎãπÏûêÍ∞Ä Í≥ß Ïó∞ÎùΩÎìúÎ¶¨Í≤†ÏäµÎãàÎã§!`,
          quickReplies: [
            { label: 'ÏÉà Í≤¨Ï†Å ÏöîÏ≤≠', action: 'message', messageText: 'ÏãúÏûë' }
          ]
        };
      } else {
        return {
          text: 'ÎÇ†Ïßú ÌòïÏãùÏù¥ Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏäµÎãàÎã§.\nYYYY-MM-DD ÌòïÏãùÏúºÎ°ú ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.\nÏòà: 2025-07-09',
          quickReplies: []
        };
      }
      
    default:
      session.step = 'start';
      return {
        text: 'ÏïàÎÖïÌïòÏÑ∏Ïöî! LED Î†åÌÉà ÏûêÎèô Í≤¨Ï†Å ÏãúÏä§ÌÖúÏûÖÎãàÎã§.\nÍ≤¨Ï†ÅÏùÑ ÏãúÏûëÌïòÏãúÍ≤†ÏäµÎãàÍπå?',
        quickReplies: [
          { label: 'Í≤¨Ï†Å ÏãúÏûë', action: 'message', messageText: 'ÏãúÏûë' }
        ]
      };
  }
}

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Ïπ¥Ïπ¥Ïò§ Ïä§ÌÇ¨ ÏÑúÎ≤ÑÍ∞Ä Ìè¨Ìä∏ ${PORT}ÏóêÏÑú Ïã§Ìñâ Ï§ëÏûÖÎãàÎã§.`);
});